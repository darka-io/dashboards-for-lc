/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as InstallRouteImport } from './routes/install'
import { Route as ExplorerRouteRouteImport } from './routes/explorer/route'
import { Route as AdministrationRouteRouteImport } from './routes/administration/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ExplorerTotal_chats_reportRouteImport } from './routes/explorer/total_chats_report'
import { Route as ExplorerTags_usageRouteImport } from './routes/explorer/tags_usage'
import { Route as ExplorerSatisfactionRouteImport } from './routes/explorer/satisfaction'
import { Route as ExplorerResponses_timeRouteImport } from './routes/explorer/responses_time'
import { Route as ExplorerMissed_chatsRouteImport } from './routes/explorer/missed_chats'
import { Route as ExplorerEngagementRouteImport } from './routes/explorer/engagement'
import { Route as ExplorerDurationRouteImport } from './routes/explorer/duration'
import { Route as ExplorerAvailabilityRouteImport } from './routes/explorer/availability'
import { Route as ExplorerArchivesRouteImport } from './routes/explorer/archives'
import { Route as ExplorerAgent_performanceRouteImport } from './routes/explorer/agent_performance'

const InstallRoute = InstallRouteImport.update({
  id: '/install',
  path: '/install',
  getParentRoute: () => rootRouteImport,
} as any)
const ExplorerRouteRoute = ExplorerRouteRouteImport.update({
  id: '/explorer',
  path: '/explorer',
  getParentRoute: () => rootRouteImport,
} as any)
const AdministrationRouteRoute = AdministrationRouteRouteImport.update({
  id: '/administration',
  path: '/administration',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExplorerTotal_chats_reportRoute =
  ExplorerTotal_chats_reportRouteImport.update({
    id: '/total_chats_report',
    path: '/total_chats_report',
    getParentRoute: () => ExplorerRouteRoute,
  } as any)
const ExplorerTags_usageRoute = ExplorerTags_usageRouteImport.update({
  id: '/tags_usage',
  path: '/tags_usage',
  getParentRoute: () => ExplorerRouteRoute,
} as any)
const ExplorerSatisfactionRoute = ExplorerSatisfactionRouteImport.update({
  id: '/satisfaction',
  path: '/satisfaction',
  getParentRoute: () => ExplorerRouteRoute,
} as any)
const ExplorerResponses_timeRoute = ExplorerResponses_timeRouteImport.update({
  id: '/responses_time',
  path: '/responses_time',
  getParentRoute: () => ExplorerRouteRoute,
} as any)
const ExplorerMissed_chatsRoute = ExplorerMissed_chatsRouteImport.update({
  id: '/missed_chats',
  path: '/missed_chats',
  getParentRoute: () => ExplorerRouteRoute,
} as any)
const ExplorerEngagementRoute = ExplorerEngagementRouteImport.update({
  id: '/engagement',
  path: '/engagement',
  getParentRoute: () => ExplorerRouteRoute,
} as any)
const ExplorerDurationRoute = ExplorerDurationRouteImport.update({
  id: '/duration',
  path: '/duration',
  getParentRoute: () => ExplorerRouteRoute,
} as any)
const ExplorerAvailabilityRoute = ExplorerAvailabilityRouteImport.update({
  id: '/availability',
  path: '/availability',
  getParentRoute: () => ExplorerRouteRoute,
} as any)
const ExplorerArchivesRoute = ExplorerArchivesRouteImport.update({
  id: '/archives',
  path: '/archives',
  getParentRoute: () => ExplorerRouteRoute,
} as any)
const ExplorerAgent_performanceRoute =
  ExplorerAgent_performanceRouteImport.update({
    id: '/agent_performance',
    path: '/agent_performance',
    getParentRoute: () => ExplorerRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/administration': typeof AdministrationRouteRoute
  '/explorer': typeof ExplorerRouteRouteWithChildren
  '/install': typeof InstallRoute
  '/explorer/agent_performance': typeof ExplorerAgent_performanceRoute
  '/explorer/archives': typeof ExplorerArchivesRoute
  '/explorer/availability': typeof ExplorerAvailabilityRoute
  '/explorer/duration': typeof ExplorerDurationRoute
  '/explorer/engagement': typeof ExplorerEngagementRoute
  '/explorer/missed_chats': typeof ExplorerMissed_chatsRoute
  '/explorer/responses_time': typeof ExplorerResponses_timeRoute
  '/explorer/satisfaction': typeof ExplorerSatisfactionRoute
  '/explorer/tags_usage': typeof ExplorerTags_usageRoute
  '/explorer/total_chats_report': typeof ExplorerTotal_chats_reportRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/administration': typeof AdministrationRouteRoute
  '/explorer': typeof ExplorerRouteRouteWithChildren
  '/install': typeof InstallRoute
  '/explorer/agent_performance': typeof ExplorerAgent_performanceRoute
  '/explorer/archives': typeof ExplorerArchivesRoute
  '/explorer/availability': typeof ExplorerAvailabilityRoute
  '/explorer/duration': typeof ExplorerDurationRoute
  '/explorer/engagement': typeof ExplorerEngagementRoute
  '/explorer/missed_chats': typeof ExplorerMissed_chatsRoute
  '/explorer/responses_time': typeof ExplorerResponses_timeRoute
  '/explorer/satisfaction': typeof ExplorerSatisfactionRoute
  '/explorer/tags_usage': typeof ExplorerTags_usageRoute
  '/explorer/total_chats_report': typeof ExplorerTotal_chats_reportRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/administration': typeof AdministrationRouteRoute
  '/explorer': typeof ExplorerRouteRouteWithChildren
  '/install': typeof InstallRoute
  '/explorer/agent_performance': typeof ExplorerAgent_performanceRoute
  '/explorer/archives': typeof ExplorerArchivesRoute
  '/explorer/availability': typeof ExplorerAvailabilityRoute
  '/explorer/duration': typeof ExplorerDurationRoute
  '/explorer/engagement': typeof ExplorerEngagementRoute
  '/explorer/missed_chats': typeof ExplorerMissed_chatsRoute
  '/explorer/responses_time': typeof ExplorerResponses_timeRoute
  '/explorer/satisfaction': typeof ExplorerSatisfactionRoute
  '/explorer/tags_usage': typeof ExplorerTags_usageRoute
  '/explorer/total_chats_report': typeof ExplorerTotal_chats_reportRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/administration'
    | '/explorer'
    | '/install'
    | '/explorer/agent_performance'
    | '/explorer/archives'
    | '/explorer/availability'
    | '/explorer/duration'
    | '/explorer/engagement'
    | '/explorer/missed_chats'
    | '/explorer/responses_time'
    | '/explorer/satisfaction'
    | '/explorer/tags_usage'
    | '/explorer/total_chats_report'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/administration'
    | '/explorer'
    | '/install'
    | '/explorer/agent_performance'
    | '/explorer/archives'
    | '/explorer/availability'
    | '/explorer/duration'
    | '/explorer/engagement'
    | '/explorer/missed_chats'
    | '/explorer/responses_time'
    | '/explorer/satisfaction'
    | '/explorer/tags_usage'
    | '/explorer/total_chats_report'
  id:
    | '__root__'
    | '/'
    | '/administration'
    | '/explorer'
    | '/install'
    | '/explorer/agent_performance'
    | '/explorer/archives'
    | '/explorer/availability'
    | '/explorer/duration'
    | '/explorer/engagement'
    | '/explorer/missed_chats'
    | '/explorer/responses_time'
    | '/explorer/satisfaction'
    | '/explorer/tags_usage'
    | '/explorer/total_chats_report'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdministrationRouteRoute: typeof AdministrationRouteRoute
  ExplorerRouteRoute: typeof ExplorerRouteRouteWithChildren
  InstallRoute: typeof InstallRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/install': {
      id: '/install'
      path: '/install'
      fullPath: '/install'
      preLoaderRoute: typeof InstallRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explorer': {
      id: '/explorer'
      path: '/explorer'
      fullPath: '/explorer'
      preLoaderRoute: typeof ExplorerRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/administration': {
      id: '/administration'
      path: '/administration'
      fullPath: '/administration'
      preLoaderRoute: typeof AdministrationRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explorer/total_chats_report': {
      id: '/explorer/total_chats_report'
      path: '/total_chats_report'
      fullPath: '/explorer/total_chats_report'
      preLoaderRoute: typeof ExplorerTotal_chats_reportRouteImport
      parentRoute: typeof ExplorerRouteRoute
    }
    '/explorer/tags_usage': {
      id: '/explorer/tags_usage'
      path: '/tags_usage'
      fullPath: '/explorer/tags_usage'
      preLoaderRoute: typeof ExplorerTags_usageRouteImport
      parentRoute: typeof ExplorerRouteRoute
    }
    '/explorer/satisfaction': {
      id: '/explorer/satisfaction'
      path: '/satisfaction'
      fullPath: '/explorer/satisfaction'
      preLoaderRoute: typeof ExplorerSatisfactionRouteImport
      parentRoute: typeof ExplorerRouteRoute
    }
    '/explorer/responses_time': {
      id: '/explorer/responses_time'
      path: '/responses_time'
      fullPath: '/explorer/responses_time'
      preLoaderRoute: typeof ExplorerResponses_timeRouteImport
      parentRoute: typeof ExplorerRouteRoute
    }
    '/explorer/missed_chats': {
      id: '/explorer/missed_chats'
      path: '/missed_chats'
      fullPath: '/explorer/missed_chats'
      preLoaderRoute: typeof ExplorerMissed_chatsRouteImport
      parentRoute: typeof ExplorerRouteRoute
    }
    '/explorer/engagement': {
      id: '/explorer/engagement'
      path: '/engagement'
      fullPath: '/explorer/engagement'
      preLoaderRoute: typeof ExplorerEngagementRouteImport
      parentRoute: typeof ExplorerRouteRoute
    }
    '/explorer/duration': {
      id: '/explorer/duration'
      path: '/duration'
      fullPath: '/explorer/duration'
      preLoaderRoute: typeof ExplorerDurationRouteImport
      parentRoute: typeof ExplorerRouteRoute
    }
    '/explorer/availability': {
      id: '/explorer/availability'
      path: '/availability'
      fullPath: '/explorer/availability'
      preLoaderRoute: typeof ExplorerAvailabilityRouteImport
      parentRoute: typeof ExplorerRouteRoute
    }
    '/explorer/archives': {
      id: '/explorer/archives'
      path: '/archives'
      fullPath: '/explorer/archives'
      preLoaderRoute: typeof ExplorerArchivesRouteImport
      parentRoute: typeof ExplorerRouteRoute
    }
    '/explorer/agent_performance': {
      id: '/explorer/agent_performance'
      path: '/agent_performance'
      fullPath: '/explorer/agent_performance'
      preLoaderRoute: typeof ExplorerAgent_performanceRouteImport
      parentRoute: typeof ExplorerRouteRoute
    }
  }
}

interface ExplorerRouteRouteChildren {
  ExplorerAgent_performanceRoute: typeof ExplorerAgent_performanceRoute
  ExplorerArchivesRoute: typeof ExplorerArchivesRoute
  ExplorerAvailabilityRoute: typeof ExplorerAvailabilityRoute
  ExplorerDurationRoute: typeof ExplorerDurationRoute
  ExplorerEngagementRoute: typeof ExplorerEngagementRoute
  ExplorerMissed_chatsRoute: typeof ExplorerMissed_chatsRoute
  ExplorerResponses_timeRoute: typeof ExplorerResponses_timeRoute
  ExplorerSatisfactionRoute: typeof ExplorerSatisfactionRoute
  ExplorerTags_usageRoute: typeof ExplorerTags_usageRoute
  ExplorerTotal_chats_reportRoute: typeof ExplorerTotal_chats_reportRoute
}

const ExplorerRouteRouteChildren: ExplorerRouteRouteChildren = {
  ExplorerAgent_performanceRoute: ExplorerAgent_performanceRoute,
  ExplorerArchivesRoute: ExplorerArchivesRoute,
  ExplorerAvailabilityRoute: ExplorerAvailabilityRoute,
  ExplorerDurationRoute: ExplorerDurationRoute,
  ExplorerEngagementRoute: ExplorerEngagementRoute,
  ExplorerMissed_chatsRoute: ExplorerMissed_chatsRoute,
  ExplorerResponses_timeRoute: ExplorerResponses_timeRoute,
  ExplorerSatisfactionRoute: ExplorerSatisfactionRoute,
  ExplorerTags_usageRoute: ExplorerTags_usageRoute,
  ExplorerTotal_chats_reportRoute: ExplorerTotal_chats_reportRoute,
}

const ExplorerRouteRouteWithChildren = ExplorerRouteRoute._addFileChildren(
  ExplorerRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdministrationRouteRoute: AdministrationRouteRoute,
  ExplorerRouteRoute: ExplorerRouteRouteWithChildren,
  InstallRoute: InstallRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
